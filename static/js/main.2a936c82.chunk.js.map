{"version":3,"sources":["components/info-card.jsx","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Container","styled","border","borderRadius","InfoCard","img","useState","patient","setPatient","firstShot","setFirstShot","secondShot","setSecondShot","code","setCode","errorMessage","setErrorMessage","useEffect","decode","then","res","entries","payload","vc","credentialSubject","fhirBundle","entry","patients","filter","e","resource","resourceType","length","shots","sort","a","b","Date","occurrenceDateTime","catch","err","console","log","onRetry","useCallback","QrScanner","scanImage","resCode","startsWith","undefined","Button","variant","onClick","CardContent","Typography","sx","fontSize","color","component","name","given","map","family","birthDate","Divider","style","borderColor","lotNumber","performer","p","actor","display","status","className","WORKER_PATH","QrScannerWorkerPath","Input","App","existingFile","localStorage","getItem","isFlipped","setIsFlipped","setImg","errorString","setErrorString","reader","useMemo","FileReader","onload","result","setItem","onFileChange","event","readAsDataURL","target","files","onDelete","confirm","removeItem","onFlip","id","htmlFor","onChange","accept","type","flipDirection","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.2a936c82.chunk.js","sourcesContent":["import { Button, Typography, CardContent, Divider } from \"@mui/material\"\r\nimport { useEffect, useState, useCallback } from \"react\";\r\nimport { styled } from '@mui/material/styles';\r\nimport decode from \"shc-protocol\";\r\nimport QrScanner from 'qr-scanner';\r\n\r\nconst Container = styled('div')({\r\n    border: '1px solid grey',\r\n    borderRadius: '1rem',\r\n});\r\n\r\nexport const InfoCard = ({ img }) => {\r\n    const [patient, setPatient] = useState();\r\n    const [firstShot, setFirstShot] = useState();\r\n    const [secondShot, setSecondShot] = useState();\r\n    const [code, setCode] = useState();\r\n    const [errorMessage, setErrorMessage] = useState();\r\n    useEffect(() => {\r\n        if(!!code && !patient) {\r\n          decode(code)\r\n            .then(res => {\r\n                const entries = res.payload.vc.credentialSubject.fhirBundle.entry;\r\n                if (!!entries) {\r\n                    const patients = entries.filter(e => e.resource.resourceType === 'Patient');\r\n                    if (patients && patients.length > 0) {\r\n                        setPatient(patients[0]);\r\n                    }\r\n                    const shots = entries\r\n                        .filter(e => e.resource.resourceType === 'Immunization')\r\n                        .sort((a, b) => new Date(a.resource.occurrenceDateTime) - new Date(b.resource.occurrenceDateTime));\r\n                    if (shots && shots.length > 0) {\r\n                        setFirstShot(shots[0]);\r\n                        if (shots.length > 1) {\r\n                            setSecondShot(shots[1]);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            .catch(err => console.log('Failed to decode QR Code'));\r\n        }\r\n      }, [code, patient, setPatient, setFirstShot, setSecondShot]);\r\n    \r\n    const onRetry = useCallback(() => {\r\n        if (!!img && !code) {\r\n          QrScanner.scanImage(img)\r\n            .then(resCode => {\r\n              if (resCode.startsWith('shc:')) {\r\n                setCode(resCode);\r\n              } else {\r\n                setCode(undefined);\r\n              }\r\n            })\r\n            .catch(err => setErrorMessage(err));\r\n          }\r\n      }, [img, code, setCode])\r\n    \r\n      useEffect(() => {\r\n          onRetry();\r\n      }, [onRetry]);\r\n    \r\n\r\n    if (!!img && !code) {\r\n        return (\r\n            <Container>\r\n                <div>Failed to scan the QR code</div>\r\n                <div>{errorMessage}</div>\r\n                <Button variant='contained' onClick={onRetry}>Retry</Button>\r\n            </Container>\r\n        );\r\n    } else if (!img && !code) {\r\n        return <Container>Loading...</Container>\r\n    } else {\r\n        return (\r\n            <Container>\r\n                <CardContent>\r\n                    <Typography sx={{ fontSize: 14 }} color='text.grey'>\r\n                        Name\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" component=\"p\">\r\n                        {`${patient?.resource?.name[0]?.given.map(name => `${name} `)} ${patient?.resource?.name[0]?.family}`}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Birthday\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" component=\"p\">\r\n                        {patient?.resource?.birthDate}\r\n                    </Typography>\r\n\r\n                    <Divider style={{ borderColor: 'grey' }}/>\r\n\r\n                    <Typography sx={{ fontSize: 18 }}>\r\n                        First Shot\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Date\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {firstShot?.resource?.occurrenceDateTime}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Lot Number\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {firstShot?.resource?.lotNumber}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Taken By\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {firstShot?.resource?.performer.map(p => `${p.actor.display},`)}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Status\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {firstShot?.resource?.status}\r\n                    </Typography>\r\n\r\n                    <Divider style={{ borderColor: 'grey' }}/>\r\n\r\n                    <Typography sx={{ fontSize: 18 }}>\r\n                        Second Shot\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Date\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {secondShot?.resource?.occurrenceDateTime}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Lot Number\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {secondShot?.resource?.lotNumber}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Taken By\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {secondShot?.resource?.performer.map(p => `${p.actor.display},`)}\r\n                    </Typography>\r\n                    <Typography sx={{ fontSize: 14 }}>\r\n                        Status\r\n                    </Typography>\r\n                    <Typography variant=\"h7\" component=\"p\">\r\n                        {secondShot?.resource?.status}\r\n                    </Typography>\r\n                </CardContent>\r\n                <div className='bar'/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\n","import { useCallback, useMemo, useState } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport QrScanner from 'qr-scanner';\r\n\r\nimport './App.css';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport QrScannerWorkerPath from '!!file-loader!../node_modules/qr-scanner/qr-scanner-worker.min';\r\nimport { InfoCard } from './components/info-card';\r\n\r\nQrScanner.WORKER_PATH = QrScannerWorkerPath;\r\n\r\nconst Input = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nconst App = () => {\r\n  const existingFile = localStorage.getItem('imagePath');\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  const [img, setImg] = useState(existingFile);\r\n  const [errorString, setErrorString] = useState();\r\n  const reader = useMemo(() => {\r\n    const res = new FileReader();\r\n    res.onload = function() {\r\n      if (!!res.result) {\r\n        setImg(res.result);\r\n        localStorage.setItem('imagePath', res.result);\r\n      } else {\r\n        setErrorString('Invalid QR Code');\r\n      }\r\n    };\r\n    return res;\r\n  }, [setImg, setErrorString]);\r\n\r\n  const onFileChange = useCallback((event) => {\r\n    reader.readAsDataURL(event.target.files[0]);\r\n    setErrorString(undefined);\r\n  }, [reader, setErrorString]);\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (!!img) {\r\n      // eslint-disable-next-line no-restricted-globals\r\n      let conf = confirm('Remove your Vaccine Card?');\r\n      if (conf) {\r\n        setImg(undefined);\r\n        setErrorString(undefined);\r\n\t\t    setIsFlipped(false);\r\n        localStorage.removeItem('imagePath');\r\n      }\r\n    }\r\n  }, [img, setImg, setErrorString, setIsFlipped]);\r\n\r\n  const onFlip = useCallback(() => {\r\n    setIsFlipped(!isFlipped);\r\n  }, [isFlipped, setIsFlipped]);\r\n\r\n\r\n  return (\r\n    <div id='app'>\r\n      \t<h1 id='app-title'>Vaccine Passport</h1>\r\n\t\t{!img && \r\n\t\t<label\r\n\t\t\tclassName='center'\r\n\t\t\thtmlFor=\"contained-button-file\">\r\n\t\t\t<Input onChange={onFileChange} accept=\"image/*\" id=\"contained-button-file\" type=\"file\" />\r\n\t\t\t<Button variant=\"contained\" component=\"span\">\r\n\t\t\t  Open\r\n\t\t\t</Button>\r\n\t\t</label>}\r\n\t\t{!!errorString && \r\n      <p className='bottom' style={{ color: 'red' }}>\r\n        {errorString}\r\n      </p>\r\n    }\r\n\t\t{!!img && \r\n\t\t\t<div\r\n\t\t\t\tid='flipper'\r\n\t\t\t\tclassName='center'>\r\n\t\t\t\t<ReactCardFlip \r\n\t\t\t\t\tisFlipped={isFlipped} \r\n\t\t\t\t\tflipDirection='horizontal'>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tonClick={onFlip}\r\n\t\t\t\t\t\tclassName='flipper-container'>\r\n\t\t\t\t\t\t<img src={img} alt='covid vaccine qr code'/>\r\n\t\t\t\t\t</div>\r\n          <div\r\n\t\t\t\t\t\tonClick={onFlip}\r\n\t\t\t\t\t\tclassName='flipper-container'>\r\n\t\t\t\t\t  <InfoCard img={img}/>\r\n          </div>\r\n\t\t\t\t</ReactCardFlip>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t}\r\n\t\t{!!img &&\r\n\t\t\t<Button\r\n\t\t\t\tid='delete'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\tcolor='error'\r\n\t\t\t\tonClick={onDelete}>\r\n\t\t\t\tDelete\r\n\t\t\t</Button>\r\n\t\t}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}